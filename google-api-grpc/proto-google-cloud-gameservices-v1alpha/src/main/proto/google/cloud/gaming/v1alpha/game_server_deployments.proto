// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.gaming.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/gaming/v1alpha/common.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/client.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/v1alpha;gaming";

option java_multiple_files = true;
option java_package = "com.google.cloud.gaming.v1alpha";

// The game server deployment is used to configure the deployment of game server
// software to Agones Fleets in game server clusters.
service GameServerDeploymentsService {
  option (google.api.default_host) = "gameservices.googleapis.com";

  // Lists game server deployments in a given project and location.
  rpc ListGameServerDeployments(ListGameServerDeploymentsRequest) returns (ListGameServerDeploymentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/locations/*}/gameServerDeployments"
    };
  }

  // Gets details of a single game server deployment.
  rpc GetGameServerDeployment(GetGameServerDeploymentRequest) returns (GameServerDeployment) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}"
    };
  }

  // Creates a new game server deployment in a given project and location.
  rpc CreateGameServerDeployment(CreateGameServerDeploymentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/locations/*}/gameServerDeployments"
      body: "game_server_deployment"
    };
  }

  // Deletes a single game server deployment.
  rpc DeleteGameServerDeployment(DeleteGameServerDeploymentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}"
    };
  }

  // Patches a game server deployment.
  rpc UpdateGameServerDeployment(UpdateGameServerDeploymentRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1alpha/{game_server_deployment.name=projects/*/locations/*/gameServerDeployments/*}"
      body: "game_server_deployment"
    };
  }

  // Starts rollout of this game server deployment based on the given game
  // server template.
  rpc StartRollout(StartRolloutRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}:startRollout"
      body: "*"
    };
  }

  // Sets rollout target for the ongoing game server deployment rollout in the
  // specified clusters and based on the given rollout percentage. Default is 0.
  rpc SetRolloutTarget(SetRolloutTargetRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}:setRolloutTarget"
      body: "*"
    };
  }

  // Commits the ongoing game server deployment rollout by setting the rollout
  // percentage to 100 in all clusters whose labels match labels in the game
  // server template.
  rpc CommitRollout(CommitRolloutRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}:commitRollout"
      body: "*"
    };
  }

  // Rolls back the ongoing game server deployment rollout by setting the
  // rollout percentage to 0 in all clusters whose labels match labels in the
  // game server template.
  rpc RevertRollout(RevertRolloutRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}:revertRollout"
      body: "*"
    };
  }

  // Retrieves information on the rollout target of the deployment, e.g. the
  // target percentage of game servers running stable_game_server_template and
  // new_game_server_template in clusters.
  rpc GetDeploymentTarget(GetDeploymentTargetRequest) returns (DeploymentTarget) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/locations/*/gameServerDeployments/*}:getDeploymentTarget"
    };
  }
}

// Request message for GameServerDeploymentsService.ListGameServerDeployments.
message ListGameServerDeploymentsRequest {
  // Required. The parent resource name, using the form:
  // `projects/{project_id}/locations/{location}`.
  string parent = 1;

  // Optional. The maximum number of items to return.  If unspecified, server
  // will pick an appropriate default. Server may return fewer items than
  // requested. A caller should only rely on response's
  // [next_page_token][google.cloud.gaming.v1alpha.ListGameServerDeploymentsResponse.next_page_token] to
  // determine if there are more GameServerDeployments left to be queried.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous List request,
  // if any.
  string page_token = 3;

  // Optional. The filter to apply to list results.
  string filter = 4;

  // Optional. Specifies the ordering of results following syntax at
  // https://cloud.google.com/apis/design/design_patterns#sorting_order.
  string order_by = 5;
}

// Response message for GameServerDeploymentsService.ListGameServerDeployments.
message ListGameServerDeploymentsResponse {
  // The list of game server delpoyments.
  repeated GameServerDeployment game_server_deployments = 1;

  // Token to retrieve the next page of results, or empty if there are no more
  // results in the list.
  string next_page_token = 2;
}

// Request message for GameServerDeploymentsService.GetGameServerDeployment.
message GetGameServerDeploymentRequest {
  // Required. The name of the game server deployment to retrieve, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;
}

// Request message for GameServerDeploymentsService.CreateGameServerDeployment.
message CreateGameServerDeploymentRequest {
  // Required. The parent resource name, using the form:
  // `projects/{project_id}/locations/{location}`.
  string parent = 1;

  // Required. The ID of the game server deployment resource to be created.
  string deployment_id = 2;

  // Required. The game server deployment resource to be created.
  GameServerDeployment game_server_deployment = 3;
}

// Request message for GameServerDeploymentsService.DeleteGameServerDeployment.
message DeleteGameServerDeploymentRequest {
  // Required. The name of the game server deployment to delete, using the form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;
}

// Request message for GameServerDeploymentsService.UpdateGameServerDeployment.
// Only allows updates for labels.
message UpdateGameServerDeploymentRequest {
  // Required. The game server deployment to be updated.
  // Only fields specified in update_mask are updated.
  GameServerDeployment game_server_deployment = 1;

  // Required. Mask of fields to update. At least one path must be supplied in
  // this field. For the `FieldMask` definition, see
  //
  // https:
  // //developers.google.com/protocol-buffers
  // // /docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

// Request message for GameServerDeploymentsService.StartRollout.
message StartRolloutRequest {
  // Required. The name of the game server deployment, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;

  // Required. The game server template for the new rollout.
  GameServerTemplate new_game_server_template = 2;
}

// Request message for GameServerDeploymentsService.SetRolloutTarget.
message SetRolloutTargetRequest {
  // Required. The name of the game server deployment, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;

  // Required. The percentage of game servers that should run the new game
  // server template in the specified clusters. Default is 0.
  repeated ClusterPercentageSelector cluster_percentage_selector = 2;
}

// Request message for GameServerDeploymentsService.CommitRollout.
message CommitRolloutRequest {
  // Required. The name of the game server deployment, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;
}

// Request message for GameServerDeploymentsService.RevertRollout.
message RevertRolloutRequest {
  // Required. The name of the game server deployment to deploy, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;
}

// Request message for GameServerDeploymentsService.GetDeploymentTarget.
message GetDeploymentTargetRequest {
  // Required. The name of the game server deployment, using the
  // form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`
  string name = 1;
}

// The percentage of game servers running this game server template in the
// selected clusters.
message ClusterPercentageSelector {
  // Labels used to identify the clusters to which this game server template
  // applies.
  LabelSelector cluster_selector = 1;

  // The percentage of game servers running this game server depolyment. The
  // percentage is applied to game server clusters which contain all of the
  // labels in the cluster selector field.
  int32 percent = 2;
}

// The game server spec sent to Agones and the rollout target.
message GameServerTemplate {
  // The description of the game server template.
  string description = 1;

  // The game server spec, which is sent to Agones.
  string spec = 2;

  // Output only. The percentage of game servers running this game server
  // template in the selected clusters.
  repeated ClusterPercentageSelector cluster_percentage_selectors = 3;

  // The ID of the game server template, specified by the user.
  string template_id = 4;
}

// The rollout target of the deployment, e.g. the target percentage of game
// servers running stable_game_server_template and new_game_server_template in
// clusters.
message DeploymentTarget {
  // The rollout target of a cluster, i.e. the percentage of game servers
  // running stable_game_server_template and new_game_server_template.
  message ClusterRolloutTarget {
    // The realm name.
    string realm = 1;

    // The cluster name.
    string cluster = 2;

    // The desired percentage of game servers that run
    // stable_game_server_template.
    int32 stable_percent = 3;

    // The desired percentage of game servers that run new_game_server_template.
    int32 new_percent = 4;
  }

  repeated ClusterRolloutTarget clusters = 1;
}

// A game server deployment resource.
message GameServerDeployment {
  // The resource name of the game server deployment, using the form:
  //
  // `projects/{project_id}/locations/{location}/gameServerDeployments/{deployment_id}`.
  // For example,
  //
  // `projects/my-project/locations/{location}/gameServerDeployments/my-deployment`.
  string name = 1;

  // Output only. The creation time.
  google.protobuf.Timestamp create_time = 2;

  // Output only. The last-modified time.
  google.protobuf.Timestamp update_time = 3;

  // The labels associated with this game server deployment. Each label is a
  // key-value pair.
  map<string, string> labels = 4;

  // Output only. The GameServerTemplate whose rollout was completed.
  GameServerTemplate stable_game_server_template = 5;

  // The GameServerTemplate whose rollout is ongoing.
  GameServerTemplate new_game_server_template = 6;
}
