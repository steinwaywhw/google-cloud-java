// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.gaming.v1alpha;

import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/v1alpha;gaming";

option java_multiple_files = true;
option java_package = "com.google.cloud.gaming.v1alpha";

// Represents the metadata of the long-running operation.
message OperationMetadata {
  // Output only. The time the operation was created.
  google.protobuf.Timestamp create_time = 1;

  // Output only. The time the operation finished running.
  google.protobuf.Timestamp end_time = 2;

  // Output only. Server-defined resource path for the target of the operation.
  string target = 3;

  // Output only. Name of the verb executed by the operation.
  string verb = 4;

  // Output only. Human-readable status of the operation, if any.
  string status_message = 5;

  // Output only. Identifies whether the user has requested cancellation
  // of the operation. Operations that have successfully been cancelled
  // have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  // corresponding to `Code.CANCELLED`.
  bool requested_cancellation = 6;

  // Output only. API version used to start the operation.
  string api_version = 7;
}

// The label selector, used to group labels on the resources.
message LabelSelector {
  map<string, string> labels = 1;
}

// The schedule of an event - the event can be recurring or one time.  The
// event's time span is specified by start_time and end_time. If the scheduled
// event's timespan is larger than the cron_spec + cron_job_duration the event
// will be recurring.
// If cron_spec + cron_job_duration is only specified, the event is effective
// starting at the local time specified by cron_spec and is recurrent.
//
//   start_time|-------[cron job]-------[cron job]-------[cron job]---|end_time
//   cron job: cron spec start time + duration
message Schedule {
  // The start time of the event.
  google.protobuf.Timestamp start_time = 1;

  // The end time of the event.
  google.protobuf.Timestamp end_time = 2;

  // The duration for the cron job event. The duration of the event is effective
  // after the cron job's start time.
  google.protobuf.Duration cron_job_duration = 3;

  // The cron definition of the scheduled event. See
  // https://en.wikipedia.org/wiki/Cron. Cron spec specifies the local time as
  // defined by the realm.
  string cron_spec = 4;
}
