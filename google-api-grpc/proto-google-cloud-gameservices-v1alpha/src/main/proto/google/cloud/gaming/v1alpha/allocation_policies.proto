// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.gaming.v1alpha;

import "google/api/annotations.proto";
import "google/cloud/gaming/v1alpha/common.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/api/client.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/gaming/v1alpha;gaming";

option java_multiple_files = true;
option java_package = "com.google.cloud.gaming.v1alpha";

// The cloud gaming allocation policy is used as the controller's recipe for the
// allocating game servers from clusters. The policy has three modes:
//   1. Default mode which is not limited to time.
//   2. Time based mode which is temporary and overrides the default mode when
//   effective.
//   3. Periodic mode which follows the time base mode, but happens
//   periodically using local time, identified by cron specs.
service AllocationPoliciesService {
  option (google.api.default_host) = "gameservices.googleapis.com";

  // List allocation policies in a given project and location.
  rpc ListAllocationPolicies(ListAllocationPoliciesRequest) returns (ListAllocationPoliciesResponse) {
    option (google.api.http) = {
      get: "/v1alpha/{parent=projects/*/locations/*}/allocationPolicies"
    };
  }

  // Gets details of a single allocation policy.
  rpc GetAllocationPolicy(GetAllocationPolicyRequest) returns (AllocationPolicy) {
    option (google.api.http) = {
      get: "/v1alpha/{name=projects/*/locations/*/allocationPolicies/*}"
    };
  }

  // Creates a new allocation policy in a given project and location.
  rpc CreateAllocationPolicy(CreateAllocationPolicyRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha/{parent=projects/*/locations/*}/allocationPolicies"
      body: "allocation_policy"
    };
  }

  // Deletes a single allocation policy.
  rpc DeleteAllocationPolicy(DeleteAllocationPolicyRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1alpha/{name=projects/*/locations/*/allocationPolicies/*}"
    };
  }

  // Patches a single allocation policy.
  rpc UpdateAllocationPolicy(UpdateAllocationPolicyRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1alpha/{allocation_policy.name=projects/*/locations/*/allocationPolicies/*}"
      body: "allocation_policy"
    };
  }
}

// Request message for AllocationPoliciesService.ListAllocationPolicies.
message ListAllocationPoliciesRequest {
  // Required. The parent resource name, using the form:
  // `projects/{project_id}/locations/{location}`.
  string parent = 1;

  // Optional. The maximum number of items to return.  If unspecified, server
  // will pick an appropriate default. Server may return fewer items than
  // requested. A caller should only rely on response's
  // [next_page_token][google.cloud.gaming.v1alpha.ListAllocationPoliciesResponse.next_page_token] to
  // determine if there are more AllocationPolicies left to be queried.
  int32 page_size = 2;

  // Optional. The next_page_token value returned from a previous List request,
  // if any.
  string page_token = 3;

  // Optional. The filter to apply to list results.
  string filter = 4;

  // Optional. Specifies the ordering of results following syntax at
  // https://cloud.google.com/apis/design/design_patterns#sorting_order.
  string order_by = 5;
}

// Response message for AllocationPoliciesService.ListAllocationPolicies.
message ListAllocationPoliciesResponse {
  // The list of allocation policies.
  repeated AllocationPolicy allocation_policies = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// Request message for AllocationPoliciesService.GetAllocationPolicy.
message GetAllocationPolicyRequest {
  // Required. The name of the allocation policy to retrieve, using the form:
  //
  // `projects/{project_id}/locations/{location}/allocationPolicies/{allocation_policy_id}`
  string name = 1;
}

// Request message for AllocationPoliciesService.CreateAllocationPolicy.
message CreateAllocationPolicyRequest {
  // Required. The parent resource name, using the form:
  // `projects/{project_id}/locations/{location}`.
  string parent = 1;

  // Required. The ID of the allocation policy resource to be created.
  string allocation_policy_id = 2;

  // Required. The allocation policy resource to be created.
  AllocationPolicy allocation_policy = 3;
}

// Request message for AllocationPoliciesService.DeleteAllocationPolicy.
message DeleteAllocationPolicyRequest {
  // Required. The name of the allocation policy to delete, using the form:
  //
  // `projects/{project_id}/locations/{location}/allocationPolicies/{allocation_policy_id}`
  string name = 1;
}

// Request message for AllocationPoliciesService.UpdateAllocationPolicy.
message UpdateAllocationPolicyRequest {
  // Required. The allocation policy to be updated.
  // Only fields specified in update_mask are updated.
  AllocationPolicy allocation_policy = 1;

  // Required. Mask of fields to update. At least one path must be supplied in
  // this field. For the `FieldMask` definition, see
  //
  // https:
  // //developers.google.com/protocol-buffers
  // // /docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

// An allocation policy resource.
message AllocationPolicy {
  // The resource name of the allocation policy, using the form:
  //
  // `projects/{project_id}/locations/{location}/allocationPolicies/{allocation_policy_id}`.
  // For example,
  // `projects/my-project/locations/{location}/allocationPolicies/my-policy`.
  string name = 1;

  // Output only. The creation time.
  google.protobuf.Timestamp create_time = 2;

  // Output only. The last-modified time.
  google.protobuf.Timestamp update_time = 3;

  // The labels associated with the allocation policy. Each label is a key-value
  // pair.
  map<string, string> labels = 4;

  // Required. The priority of the policy for allocation. A smaller value
  // indicates a higher priority.
  google.protobuf.Int32Value priority = 8;

  // The relative weight of the policy based on its priority - If there are
  // multiple policies with the same priority, the probability of using a policy
  // is based on its weight.
  int32 weight = 9;

  // The cluster labels are used to identify the clusters that a policy is
  // applied to.
  repeated LabelSelector cluster_selectors = 10;

  // The event schedules - If specified, the policy is time based and when the
  // schedule is effective overrides the default policy.
  repeated Schedule schedules = 11;
}
